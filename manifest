#!/usr/bin/env php
<?php
function _cleanup_header_comment($str)
{
	return trim(preg_replace('/\s*(?:\*\/|\?>).*/', '', $str));
}

function get_file_data($file, $default_headers, $context = '')
{
	// Pull only the first 8 KB of the file in.
	$file_data = file_get_contents($file, false, null, 0, 8 * 1024);

	if (false === $file_data) {
		$file_data = '';
	}

	// Make sure we catch CR-only line endings.
	$file_data = str_replace("\r", "\n", $file_data);

	/**
	 * Filters extra file headers by context.
	 *
	 * The dynamic portion of the hook name, `$context`, refers to
	 * the context where extra headers might be loaded.
	 *
	 */

	foreach ($default_headers as $field => $regex) {
		if (preg_match('/^(?:[ \t]*<\?php)?[ \t\/*#@]*' . preg_quote($regex, '/') . ':(.*)$/mi', $file_data, $match) && $match[1]) {
			$all_headers[$field] = _cleanup_header_comment($match[1]);
		} else {
			$all_headers[$field] = '';
		}
	}

	return $all_headers;
}

function get_plugin_data($plugin_file) {
	$default_headers = array(
		'Name'            => 'Plugin Name',
		'PluginURI'       => 'Plugin URI',
		'Version'         => 'Version',
		'Description'     => 'Description',
		'Author'          => 'Author',
		'AuthorURI'       => 'Author URI',
		'TextDomain'      => 'Text Domain',
		'DomainPath'      => 'Domain Path',
		'Network'         => 'Network',
		'RequiresWP'      => 'Requires at least',
		'RequiresPHP'     => 'Requires PHP',
		'UpdateURI'       => 'Update URI',
		'RequiresPlugins' => 'Requires Plugins',
	);
	$plugin_data = get_file_data($plugin_file, $default_headers, 'plugin');

	// If no text domain is defined fall back to the plugin slug.
	if (!$plugin_data['TextDomain']) {
		$plugin_slug = dirname($plugin_file);
		if ('.' !== $plugin_slug && !str_contains($plugin_slug, '/')) {
			$plugin_data['TextDomain'] = $plugin_slug;
		}
	}

	$plugin_data['Title'] = $plugin_data['Name'];
	$plugin_data['AuthorName'] = $plugin_data['Author'];

	return $plugin_data;
}
function create_folder_if_not_exists($folders) {
	$pathes = array();
    if(is_string($folders)){
	    $pathes[] = $folders;
    }
    if(is_array($folders)){
	    $pathes = $folders;
    }
    foreach($pathes as $path):
	    if(!is_dir($path)){
		    $path = str_replace(' ', '\ ', $path);
		    exec("mkdir $path");
	    }
    endforeach;
}
$plugn_folder = 'import-entries-for-gravity-forms';
$info = get_plugin_data(__DIR__ . DIRECTORY_SEPARATOR . "$plugn_folder.php");
//copy all files to release folder
$folders = array();
$folders[] = $releases_dir = dirname(dirname(__DIR__)) . DIRECTORY_SEPARATOR.$plugn_folder;
//$folders[] = $version_dir = $releases_dir. DIRECTORY_SEPARATOR . $info['Version'];
$folders[] = $trunk_dir = $releases_dir. DIRECTORY_SEPARATOR . "trunk";
$folders[] = $version_dir = $releases_dir.DIRECTORY_SEPARATOR. "tags". DIRECTORY_SEPARATOR . $info['Version'];
create_folder_if_not_exists($folders);
//sleep(5);
//var_dump($releases_dir);
$__DIR__     = str_replace(' ', '\ ', __DIR__.DIRECTORY_SEPARATOR);
$trunk_dir = str_replace(' ', '\ ', $trunk_dir);
$version_dir = str_replace(' ', '\ ', $version_dir);
//var_dump($folders);
exec("cp -r $__DIR__*  $version_dir");
exec("rm -fr $version_dir".DIRECTORY_SEPARATOR.'manifest');
echo "copy to $version_dir done\n";
exec("cp -r $__DIR__*  $trunk_dir");
exec("rm -fr $trunk_dir".DIRECTORY_SEPARATOR.'manifest');
echo "copy to $trunk_dir done\n";
